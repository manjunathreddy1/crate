import { spfi, SPFI } from "@pnp/sp";
import { Caching } from "@pnp/queryable";
import "@pnp/sp/folders";
import "@pnp/sp/items";
import "@pnp/sp/lists";
import "@pnp/sp/webs";
import "@pnp/sp/security";
import { getSP } from "./pnpjsConfig";

// Extend with ContentType Name
interface IPageTemplateListItem {
  Id: number;
  Title: string;
  ContentTypeId: string;
  BannerImageUrl?: string;
  ContentType: {
    Name: string;
  };
}

// Also include in output
interface IPageTemplate {
  name: string;
  title: string;
  id: number;
  contentTypeId: string;
  contentTypeName: string;
  bannerImageUrl?: string;
}

export const GetTemplateItems = async (): Promise<IPageTemplate[]> => {
  try {
    let _sp: SPFI;
    _sp = getSP();

    const spCache = spfi(_sp).using(Caching({ store: "session" }));

    const files = await spCache.web
      .getFolderByServerRelativePath("/sites/Cadence/SitePages/Templates")
      .files.expand("ListItemAllFields, ListItemAllFields/ContentType")();

    const mapped: IPageTemplate[] = files.map((f) => {
      const item = (
        f as unknown as { ListItemAllFields: IPageTemplateListItem }
      ).ListItemAllFields;

      return {
        name: f.Name,
        title: item.Title,
        id: item.Id,
        contentTypeId: item.ContentTypeId,
        contentTypeName: item.ContentType?.Name ?? "",
        bannerImageUrl: item.BannerImageUrl,
      };
    });

    return mapped;
  } catch (error) {
    console.error("Error fetching template files:", error);
    return [];
  }
};
