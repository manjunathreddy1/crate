import * as React from "react";
import {
  DataGrid,
  DataGridBody,
  DataGridCell,
  DataGridHeader,
  DataGridHeaderCell,
  DataGridRow,
  TableColumnDefinition,
  createTableColumn,
  Button,
  Toolbar,
  ToolbarButton,
} from "@fluentui/react-components";
import { TableRowId } from "@fluentui/react-components";
import { spfi, SPFI } from "@pnp/sp";
import { getSP } from "./pnpjsConfig"; // Adjust path as needed
import { Caching } from "@pnp/queryable";
import {
  CheckmarkCircle20Regular,
  ClipboardTaskListLtr20Regular,
} from "@fluentui/react-icons";

// Define item type
interface PageItem {
  id: string;
  fileName: string;
  title: string;
  created: string;
  modified: string;
}

const GridWithActionAndCommand = () => {
  const [items, setItems] = React.useState<PageItem[]>([]);
  const [selectedIds, setSelectedIds] = React.useState<Set<TableRowId>>(
    new Set()
  );

  React.useEffect(() => {
    const loadData = async () => {
      let _sp: SPFI;
      _sp = getSP();

      const spCache = spfi(_sp).using(Caching({ store: "session" }));
      const pages = await spCache.web.lists
        .getByTitle("Site Pages")
        .items.select("Id", "FileLeafRef", "Title", "Created", "Modified")
        .orderBy("Modified", false) // false for descending order
        .top(100)();

      const mapped: PageItem[] = pages.map((page: any) => ({
        id: page.Id.toString(),
        fileName: page.FileLeafRef,
        title: page.Title,
        created: new Date(page.Created).toLocaleString(),
        modified: new Date(page.Modified).toLocaleString(),
      }));
      setItems(mapped);
    };
    loadData();
  }, []);

  const handleActionClick = (id: string) => {
    console.log("Clicked ID:", id);
  };

  const handleCommandClick = () => {
    const selectedArray = Array.from(selectedIds);
    console.log("Selected IDs:", selectedArray);
  };

  const columns: TableColumnDefinition<PageItem>[] = [
    createTableColumn<PageItem>({
      columnId: "fileName",
      renderHeaderCell: () => "File Name",
      renderCell: (item) => item.fileName,
    }),
    createTableColumn<PageItem>({
      columnId: "title",
      renderHeaderCell: () => "Title",
      renderCell: (item) => item.title,
    }),
    createTableColumn<PageItem>({
      columnId: "created",
      renderHeaderCell: () => "Created",
      renderCell: (item) => item.created,
    }),
    createTableColumn<PageItem>({
      columnId: "modified",
      renderHeaderCell: () => "Modified",
      renderCell: (item) => item.modified,
    }),
    createTableColumn<PageItem>({
      columnId: "actions",
      renderHeaderCell: () => "Actions",
      renderCell: (item) => (
        <Button
          onClick={(event) => {
            event.stopPropagation(); // Prevents row selection
            handleActionClick(item.id);
          }}
          size="small"
        >
          Click Me
        </Button>
      ),
    }),
  ];

  return (
    <>
      <Toolbar>
        <ToolbarButton
          onClick={handleCommandClick}
          disabled={selectedIds.size === 0}
          icon={<ClipboardTaskListLtr20Regular />}
        >
          Get Selected IDs
        </ToolbarButton>
        <ToolbarButton
          onClick={handleCommandClick}
          disabled={selectedIds.size === 0}
          icon={<CheckmarkCircle20Regular />}
        >
          Approve
        </ToolbarButton>
      </Toolbar>

      <DataGrid
        items={items}
        columns={columns}
        selectionMode="multiselect"
        selectionAppearance="neutral"
        selectedItems={selectedIds}
        getRowId={(item: PageItem) => item.id}
        onSelectionChange={(e, data) => {
          setSelectedIds(data.selectedItems);
        }}
      >
        <DataGridHeader>
          <DataGridRow
            selectionCell={{
              checkboxIndicator: { "aria-label": "Select all rows" },
            }}
          >
            {({ renderHeaderCell }) => (
              <DataGridHeaderCell>{renderHeaderCell()}</DataGridHeaderCell>
            )}
          </DataGridRow>
        </DataGridHeader>
        <DataGridBody<PageItem>>
          {({ item, rowId }) => (
            <DataGridRow<PageItem>
              key={rowId}
              selectionCell={{
                checkboxIndicator: { "aria-label": "Select row" },
              }}
            >
              {({ renderCell }) => (
                <DataGridCell>{renderCell(item)}</DataGridCell>
              )}
            </DataGridRow>
          )}
        </DataGridBody>
      </DataGrid>
    </>
  );
};

export default GridWithActionAndCommand;
